


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;                                           ARM Cortex-M
                       3 Port
    9 00000000         ;
   10 00000000         ; File      : OS_CPU_A.ASM
   11 00000000         ; Version   : V2.89
   12 00000000         ; By        : Jean J. Labrosse
   13 00000000         ;             Brian Nagel
   14 00000000         ;
   15 00000000         ; For       : ARMv7M Cortex-M3
   16 00000000         ; Mode      : Thumb2
   17 00000000         ; Toolchain : IAR EWARM
   18 00000000         ;*******************************************************
                       *************************************************
   19 00000000         
   20 00000000         ;*******************************************************
                       *************************************************
   21 00000000         ;                                           PUBLIC FUNCT
                       IONS
   22 00000000         ;*******************************************************
                       *************************************************
   23 00000000         
   24 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   25 00000000                 IMPORT           OSPrioCur
   26 00000000                 IMPORT           OSPrioHighRdy
   27 00000000                 IMPORT           OSTCBCur
   28 00000000                 IMPORT           OSTCBHighRdy
   29 00000000                 IMPORT           OSIntExit
   30 00000000                 IMPORT           OSTaskSwHook
   31 00000000                 IMPORT           OS_CPU_ExceptStkBase
   32 00000000         
   33 00000000         
   34 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   35 00000000                 EXPORT           OS_CPU_SR_Restore
   36 00000000                 EXPORT           OSStartHighRdy
   37 00000000                 EXPORT           OSCtxSw
   38 00000000                 EXPORT           OSIntCtxSw
   39 00000000         ;    EXPORT    OS_CPU_PendSVHandler                     
                                ; ×¢ÊÍµô
   40 00000000                 EXPORT           PendSV_Handler ; PendSVÖÐ¶Ï
   41 00000000         ;    EXPORT    OSPendSV
   42 00000000         
   43 00000000         ;*******************************************************
                       *************************************************
   44 00000000         ;                                                EQUATES
                       



ARM Macro Assembler    Page 2 


   45 00000000         ;*******************************************************
                       *************************************************
   46 00000000         
   47 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷£¬¾
                                                            ßÌåÇë²Î¿¼¡¶Cortex-M
                                                            3È¨ÍþÖ¸ÄÏ(ÖÐÎÄ).pdf
                                                            ¡·µÚ284Ò³ÄÚÈÝ
   48 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷£
                                                            ¨2£©£¬¾ßÌåÇë²Î¿¼¡¶C
                                                            ortex-M3È¨ÍþÖ¸ÄÏ(ÖÐ
                                                            ÎÄ).pdf¡·µÚ286Ò³ÄÚÈ
                                                            Ý
   49 00000000         ;NVIC_SYSPRI14   EQU     0xE000ED22  ; ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷£
                       ¨14£©£¬¾ßÌåÇë²Î¿¼¡¶Cortex-M3È¨ÍþÖ¸ÄÏ(ÖÐÎÄ).pdf¡·µÚ286Ò³Ä
                       ÚÈÝ
   50 00000000         
   51 00000000         
   52 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000  ; PendSVÖÐ¶ÏºÍÏµÍ³½
                                                            ÚÅÄÖÐ¶Ï(¶¼Îª×îµÍ£¬0
                                                            xff)
   53 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Èí¼þ´¥·¢ÖÐ¶ÏÖµ
   54 00000000         
   55 00000000         ;*******************************************************
                       *************************************************
   56 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   57 00000000         ;*******************************************************
                       *************************************************
   58 00000000         
   59 00000000                 PRESERVE8
   60 00000000         
   61 00000000                 AREA             |.text|, CODE, READONLY
   62 00000000                 THUMB
   63 00000000         
   64 00000000         ;*******************************************************
                       *************************************************
   65 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   66 00000000         ;
   67 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you
   68 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   69 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   70 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   71 00000000         ;              into the CPU's status register.
   72 00000000         ;
   73 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   74 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S



ARM Macro Assembler    Page 3 


                       R cpu_sr);
   75 00000000         ;
   76 00000000         ;
   77 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   78 00000000         ;
   79 00000000         ;                 void Task (void *p_arg)
   80 00000000         ;                 {
   81 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   82 00000000         ;                     OS_CPU_SR  cpu_sr;
   83 00000000         ;                 #endif
   84 00000000         ;
   85 00000000         ;                          :
   86 00000000         ;                          :
   87 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
   88 00000000         ;                          :
   89 00000000         ;                          :
   90 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
   91 00000000         ;                          :
   92 00000000         ;                          :
   93 00000000         ;                 }
   94 00000000         ;*******************************************************
                       *************************************************
   95 00000000         
   96 00000000         OS_CPU_SR_Save
   97 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   98 00000004 B672            CPSID            I
   99 00000006 4770            BX               LR
  100 00000008         
  101 00000008         OS_CPU_SR_Restore
  102 00000008 F380 8810       MSR              PRIMASK, R0
  103 0000000C 4770            BX               LR
  104 0000000E         
  105 0000000E         ;*******************************************************
                       *************************************************
  106 0000000E         ;                                          START MULTITA
                       SKING
  107 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  108 0000000E         ;
  109 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  110 0000000E         ;              the first task to start.
  111 0000000E         ;
  112 0000000E         ;           2) OSStartHighRdy() MUST:
  113 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  114 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  115 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base
  116 0000000E         ;              d) Set OSRunning to TRUE;
  117 0000000E         ;              e) Trigger PendSV exception;
  118 0000000E         ;              f) Enable interrupts (tasks will run with



ARM Macro Assembler    Page 4 


                        interrupts enabled).
  119 0000000E         ;*******************************************************
                       *************************************************
  120 0000000E         
  121 0000000E         OSStartHighRdy                       ; µ÷¶ÈÈÎÎñ
  122 0000000E         ;    LDR     R0, =NVIC_SYSPRI14                         
                                ; Set the PendSV exception priority
  123 0000000E 481D            LDR              R0, =NVIC_SYSPRI2 ; Set the Pen
                                                            dSV exception prior
                                                            ity
  124 00000010         
  125 00000010 491D            LDR              R1, =NVIC_PENDSV_PRI
  126 00000012 7001            STRB             R1, [R0]
  127 00000014         
  128 00000014 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  129 00000016 F380 8809       MSR              PSP, R0
  130 0000001A         
  131 0000001A         ;    LDR     R0, =OS_CPU_ExceptStkBase                  
                                ; Initialize the MSP to the OS_CPU_ExceptStkBas
                       e
  132 0000001A         ;    LDR     R1, [R0]
  133 0000001A         ;    MSR     MSP, R1    
  134 0000001A         
  135 0000001A 481C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  136 0000001C 2101            MOVS             R1, #1
  137 0000001E 7001            STRB             R1, [R0]
  138 00000020         
  139 00000020 481B            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  140 00000022 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  141 00000026 6001            STR              R1, [R0]
  142 00000028         
  143 00000028 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  144 0000002A         
  145 0000002A         OSStartHang
  146 0000002A E7FE            B                OSStartHang ; Should never get 
                                                            here
  147 0000002C         
  148 0000002C         
  149 0000002C         ;*******************************************************
                       *************************************************
  150 0000002C         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  151 0000002C         ;                                           void OSCtxSw
                       (void)
  152 0000002C         ;
  153 0000002C         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  154 0000002C         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  155 0000002C         ;*******************************************************
                       *************************************************



ARM Macro Assembler    Page 5 


  156 0000002C         
  157 0000002C         OSCtxSw                              ; ÈÎÎñÇÐ»»
  158 0000002C 4818            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  159 0000002E F04F 5180       LDR              R1, =NVIC_PENDSVSET
  160 00000032 6001            STR              R1, [R0]
  161 00000034 4770            BX               LR
  162 00000036         
  163 00000036         ;*******************************************************
                       *************************************************
  164 00000036         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  165 00000036         ;                                         void OSIntCtxS
                       w(void)
  166 00000036         ;
  167 00000036         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  168 00000036         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  169 00000036         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  170 00000036         ;*******************************************************
                       *************************************************
  171 00000036         
  172 00000036         OSIntCtxSw                           ; ÖÐ¶ÏÀàÐÍÈÎÎñÇÐ»»
  173 00000036 4816            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  174 00000038 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  175 0000003C 6001            STR              R1, [R0]
  176 0000003E 4770            BX               LR
  177 00000040         
  178 00000040         ;*******************************************************
                       *************************************************
  179 00000040         ;                                         HANDLE PendSV 
                       EXCEPTION
  180 00000040         ;                                     void OS_CPU_PendSV
                       Handler(void)
  181 00000040         ;
  182 00000040         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  183 00000040         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  184 00000040         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  185 00000040         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  186 00000040         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
  187 00000040         ;              a thread or occurs due to an interrupt or
                        exception.
  188 00000040         ;
  189 00000040         ;           2) Pseudo-code is:
  190 00000040         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  191 00000040         ;              b) Save remaining regs r4-r11 on process 



ARM Macro Assembler    Page 6 


                       stack;
  192 00000040         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  193 00000040         ;              d) Call OSTaskSwHook();
  194 00000040         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  195 00000040         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  196 00000040         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  197 00000040         ;              h) Restore R4-R11 from new process stack;
                       
  198 00000040         ;              i) Perform exception return which will re
                       store remaining context.
  199 00000040         ;
  200 00000040         ;           3) On entry into PendSV handler:
  201 00000040         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  202 00000040         ;                 xPSR, PC, LR, R12, R0-R3
  203 00000040         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  204 00000040         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  205 00000040         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  206 00000040         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  207 00000040         ;
  208 00000040         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  209 00000040         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  210 00000040         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  211 00000040         ;*******************************************************
                       *************************************************
  212 00000040         
  213 00000040         ;OS_CPU_PendSVHandler
  214 00000040         PendSV_Handler
  215 00000040         ;OSPendSV
  216 00000040 B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  217 00000042 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  218 00000046         ;    CBZ     R0, OS_CPU_PendSVHandler_nosave            
                                ; Skip register save the first time
  219 00000046 B128            CBZ              R0, PendSV_Handler_nosave ; Ski
                                                            p register save the
                                                             first time
  220 00000048         
  221 00000048         
  222 00000048 3820            SUBS             R0, R0, #0x20 ; Save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  223 0000004A E880 0FF0       STM              R0, {R4-R11}
  224 0000004E         
  225 0000004E 4911            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;



ARM Macro Assembler    Page 7 


  226 00000050 6809            LDR              R1, [R1]
  227 00000052 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  228 00000054         
  229 00000054         ; At this point, entire context of process has been save
                       d
  230 00000054         ;OS_CPU_PendSVHandler_nosave
  231 00000054         PendSV_Handler_nosave
  232 00000054 B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  233 00000056 4810            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  234 00000058 4780            BLX              R0
  235 0000005A F85D EB04       POP              {R14}
  236 0000005E         
  237 0000005E 480F            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  238 00000060 490F            LDR              R1, =OSPrioHighRdy
  239 00000062 780A            LDRB             R2, [R1]
  240 00000064 7002            STRB             R2, [R0]
  241 00000066         
  242 00000066 480B            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  243 00000068 490E            LDR              R1, =OSTCBHighRdy
  244 0000006A 680A            LDR              R2, [R1]
  245 0000006C 6002            STR              R2, [R0]
  246 0000006E         
  247 0000006E 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  248 00000070 E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  249 00000074 3020            ADDS             R0, R0, #0x20
  250 00000076 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  251 0000007A F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  252 0000007E B662            CPSIE            I
  253 00000080 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  254 00000082         
  255 00000082 BF00            NOP
  256 00000084         
  257 00000084                 END
              E000ED20 
              FFFF0000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=..\obj\os_cpu_a.d -o..\obj\os_cpu_a.o -IC:\Users\Yuenjee\Desktop\u



ARM Macro Assembler    Page 8 


COSII\USER\RTE -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.1.0\Device\Include -I
C:\Keil_v5\ARM\CMSIS\Include --predefine="__UVISION_VERSION SETA 520" --predefi
ne="STM32F10X_HD SETA 1" --list=..\lis\os_cpu_a.lst ..\UCOSII\PORTS\os_cpu_a.as
m



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 61 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      None
Comment: .text unused
OSCtxSw 0000002C

Symbol: OSCtxSw
   Definitions
      At line 157 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 37 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000036

Symbol: OSIntCtxSw
   Definitions
      At line 172 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 38 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 0000002A

Symbol: OSStartHang
   Definitions
      At line 145 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 146 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 121 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 36 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore
   Definitions
      At line 101 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 35 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 96 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 34 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 00000040

Symbol: PendSV_Handler



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 214 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 40 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: PendSV_Handler used once
PendSV_Handler_nosave 00000054

Symbol: PendSV_Handler_nosave
   Definitions
      At line 231 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 219 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: PendSV_Handler_nosave used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 47 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 139 in file ..\UCOSII\PORTS\os_cpu_a.asm
      At line 158 in file ..\UCOSII\PORTS\os_cpu_a.asm
      At line 173 in file ..\UCOSII\PORTS\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 53 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 140 in file ..\UCOSII\PORTS\os_cpu_a.asm
      At line 159 in file ..\UCOSII\PORTS\os_cpu_a.asm
      At line 174 in file ..\UCOSII\PORTS\os_cpu_a.asm

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 52 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 125 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 48 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 123 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 29 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 25 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 237 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 26 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 238 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 24 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 135 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 27 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 225 in file ..\UCOSII\PORTS\os_cpu_a.asm
      At line 242 in file ..\UCOSII\PORTS\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 28 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 243 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 30 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      At line 233 in file ..\UCOSII\PORTS\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 31 in file ..\UCOSII\PORTS\os_cpu_a.asm
   Uses
      None
Comment: OS_CPU_ExceptStkBase unused
8 symbols
355 symbols in table
